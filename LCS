/* 求最长公共子串的问题LCS
 * 二维数组c用来存放字符串
 * 二维数组d用来存放c[i][j]是通过哪种方式得到的：
 * (1)Xi == Yj,则这种方式为0;
 * (2)Xi != Yj,如果c[i-1][j]>c[i][j-1],则这种方式为1;
 * (3)Xi != Yj,如果c[i-1][j]<=c[i][j-1],则这种方式为-1;
 * */
#include<iostream>
#include<string>
#include<string.h>
#include<stdio.h>
using namespace std;

const int MAXLEN = 100;

//构造动态规划表, 其中str1的字符放在横向, str2的字符纵向排列
void LCSLength(char *str1, char *str2, int m, int n, int c[][MAXLEN], int d[][MAXLEN])
{
	int i, j;
	for(i = 0; i < m; ++i)
		c[i][0] = 0;
	for(j = 0; j < n; ++j)
		c[0][j] = 0;
	for(i = 1; i <= m; ++i){
		for(j = 1; j <= n; ++j){
			if(str1[i-1] == str2[j-1]){
				c[i][j] = c[i-1][j-1] + 1;
				d[i][j] = 0;
			}
			else if(c[i-1][j] > c[i][j-1]){
				c[i][j] = c[i-1][j];
				d[i][j] = 1;
			}
			else{
				c[i][j] = c[i][j-1];
				d[i][j] = -1;
			}
		}
	}
}

void printLCS(int b[][MAXLEN], char *x, int len1, int len2)
{
	if(len1 == 0 || len2 == 0)
		return;
	if(b[len1][len2] == 0){
		printLCS(b, x, len1-1, len2-1);
		printf("%c", x[len1-1]);
	}
	else if(b[len1][len2] == 1)
		printLCS(b, x, len1-1, len2);
	else
		printLCS(b, x, len1, len2-1);
}

int main()
{
//	int array[8] = {3, 7, 9, 4, 6, 8, 4, 9};
//	bubble_sort(array, 8);

//	for(int i = 0; i < 8; ++i){
//		cout<<array[i]<<" ";
//	}
//	cout<<endl;
//	char *str = "Hello";
//	cout<<"The length is "<<strlen(str)<<endl;
	char x[MAXLEN] = {"ABCBDAB"};
	char y[MAXLEN] = {"BDCABA"};
	int c[MAXLEN][MAXLEN];
	int b[MAXLEN][MAXLEN];
	int m = strlen(x);
	int n = strlen(y);

	LCSLength(x, y, m, n, c, b);
	printLCS(b, x, m, n);
	
	return 0;
}
